---
# time ANSIBLE_STRATEGY=debug ANSIBLE_DEBUG=1 no_proxy="*" ansible-playbook playbooks/all.yml --tags day5 -i inputs -f1

# Set the input
- name: Set example input
  ansible.builtin.set_fact:
    day5_input: |-
      seeds: 79 14 55 13

      seed-to-soil map:
      50 98 2
      52 50 48

      soil-to-fertilizer map:
      0 15 37
      37 52 2
      39 0 15

      fertilizer-to-water map:
      49 53 8
      0 11 42
      42 0 7
      57 7 4

      water-to-light map:
      88 18 7
      18 25 70

      light-to-temperature map:
      45 77 23
      81 45 19
      68 64 13

      temperature-to-humidity map:
      0 69 1
      1 0 69

      humidity-to-location map:
      60 56 37
      56 93 4
  when: day5_input is not defined

# Parse the input into seperate lists
- name: Get seperate inputs
  ansible.builtin.set_fact:
    seeds: "{{ day5_input | split('\n\n') | first | regex_replace('^seeds: ', '') | split(' ') | map('int') | list }}"
    maps: "{{ day5_input | split('\n\n') | reject('match', '^seeds: ') }}"

# Store maps as dicts
- name: Store maps as dicts
  ansible.builtin.set_fact:
    maps_dict:
      seed_to_soil: "{{ seperate_lists[0] }}"
      soil_to_fertilizer: "{{ seperate_lists[1] }}"
      fertilizer_to_water: "{{ seperate_lists[2] }}"
      water_to_light: "{{ seperate_lists[3] }}"
      light_to_temperature: "{{ seperate_lists[4] }}"
      temperature_to_humidity: "{{ seperate_lists[5] }}"
      humidity_to_location: "{{ seperate_lists[6] }}"
  vars:
    seperate_lists: "{{ maps | map('split', '\n') | map('reject', 'match', '^.*map:$') }}"

# Part 1, convert seeds
- name: Convert ranges for each seed
  ansible.builtin.set_fact:
    seeds_converted: "{{ seeds_converted | default([]) + [convert_range | int] }}"
  # Loop over range of seed indexes
  loop: "{{ range(0, seeds | length) | list }}"
  vars:
    # Less efficient loop
    convert_range: "
      {# COMMENT: Set the seed #}
      {%- set ns = namespace(seed = seeds[item]) -%}
      {# COMMENT: For every mapping... #}
      {% for mapping in maps_dict | dict2items %}
        {# COMMENT: Set this so we can break the loop once it's already been converted #}
        {%- set breakns = namespace(break = false) -%}
        {# COMMENT: For every range in the mapping... #}
        {% for dst_start, src_start, size in mapping.value | map('split', ' ') | map('map', 'int') | list %}
          {# COMMENT: If we haven't already converted this seed... #}
          {% if not breakns.break | bool %}
            {# COMMENT: If the seed is in the range... #}
            {% if ns.seed | int >= src_start | int and ns.seed | int < src_start | int + size | int %}
              {# COMMENT: Convert the seed #}
              {%- set ns.seed = dst_start | int + (ns.seed | int - src_start | int) -%}
              {%- set breakns.break = true -%}
            {% endif %}
          {% endif %}
        {% endfor %}
      {% endfor %}
      {{ ns.seed }}"

# Get the lowest seed location
- name: ANSWER TO PART 1 | Get the lowest seed location
  ansible.builtin.debug:
    msg: "{{ seeds_converted | min }}"

- name: Reset vars for part 2
  ansible.builtin.set_fact:
    seeds_converted: []
    seeds: []

# Part 2, seeds are pairs of numbers + range. Just grab the pairs. We use a regex here since regexes don't overlap by default
- name: Get number pairings
  ansible.builtin.set_fact:
    number_pairings: "{{ day5_input | split('\n\n') | first | regex_replace('^seeds: ', '') | regex_findall('\\d+ \\d+') | list | map('split', ' ') | map('map', 'int') | list }}"

# # FUCK IT JUST BRUTEFORCE
# # Just generate a list with every seed number
# - name: Loop over number pairings
#   ansible.builtin.set_fact:
#     seeds: "{{ seeds | default([]) + new_numbers | trim | from_yaml | list | map('int') }}"
#   loop: "{{ number_pairings | map('split', ' ') | list }}"
#   vars:
#     new_numbers: "
#       {% set ns = namespace(new_numbers = []) %}
#       {% for j in range(item.0 | int, (item.0 | int + item.1 | int)) %}
#         {% set ns.new_numbers = ns.new_numbers + [j] %}
#       {% endfor %}
#       {{ ns.new_numbers }}"

# YEAHHHHH okay brute forcing isn't gonna work here. It'd probably work for a sane programming language, but that single previous task did not show any sign of progress
# after running for 11, YES, ELEVEN HOURS.

# ok no im too dumb for this maybe a different brute force approach?

# - name: Create list of all seeds
#   ansible.builtin.set_fact:
#     seeds: "{{ seeds | default([]) + new_seeds | list | map('int') }}"
#   loop: "{{ number_pairings }}"
#   vars:
#     new_seeds: "{{ range(item.0, item.0 + item.1) }}"

# Aaaaand that literally just made Ansible eat up 40GB of RAM and caused my computer to freeze. I'm gonna need to be smarter about this.

...

